{
	"info": {
		"_postman_id": "2b822aba-ebe6-437e-8bf5-a1068ac1df70",
		"name": "REST API basics: CRUD, test & variable",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32209834",
		"_collection_link": "https://interstellar-shadow-219984.postman.co/workspace/My-Workspace~95d66a91-f1da-4c07-88eb-79b2195eefc3/collection/32209834-2b822aba-ebe6-437e-8bf5-a1068ac1df70?action=share&source=collection_link&creator=32209834"
	},
	"item": [
		{
			"name": "Signup(Register) data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/*// Akyros Typas xwris role //Den douleuei alla bgazei mynyma swstou\n{\n  \"username\": \"PetrPan\",\n  \"name\": \"Panagiotis Petroulias\",\n  \"password\": \"PetrPan\",\n  \"birthDate\": \"2003-11-27\",\n  \"role\": \"ROLE_USER\" \n  \n}\n// Mpampas Admin\n{\n  \"username\": \"PetrMan\",\n  \"name\": \"Petroulias Manolis\",\n  \"password\": \"PetrMan\",\n  \"birthDate\": \"1969-08-29\",\n  \"role\": \"ROLE_ADMIN\"\n  \n}\n// Mama Employee\n{\n    \"username\": \"LatsElen\",\n    \"name\": \"Latsi Eleni\",\n    \"password\": \"LatsElen\",\n    \"birthDate\": \"1972-11-03\",\n    \"role\": \"ROLE_EMPLOYEE\"\n}\n// Giorgos Farmer\n*//*{\n    \"username\": \"PetrGeorge\",\n    \"name\": \"Petroulias Giorgos\",\n    \"password\": \"PetrGeorge\",\n    \"birthDate\": \"2000-05-25\",\n    \"role\": \"ROLE_FARMER\"\n}\n*/\n{\n    \"username\": \"blakas\",\n    \"name\" : \"Vlospa\",\n    \"password\": \"blakas\",\n    \"birthDate\" : \"1995-05-25\",\n    \"role\" : \"ROLE_USER\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/auth/signup",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Signup(Register)  Farmer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/*// Akyros Typas xwris role //Den douleuei alla bgazei mynyma swstou\n{\n  \"username\": \"PetrPan\",\n  \"name\": \"Panagiotis Petroulias\",\n  \"password\": \"PetrPan\",\n  \"birthDate\": \"2003-11-27\",\n  \"role\": \"ROLE_USER\" \n  \n}\n// Mpampas Admin\n{\n  \"username\": \"PetrMan\",\n  \"name\": \"Petroulias Manolis\",\n  \"password\": \"PetrMan\",\n  \"birthDate\": \"1969-08-29\",\n  \"role\": \"ROLE_ADMIN\"\n  \n}\n// Mama Employee\n{\n    \"username\": \"LatsElen\",\n    \"name\": \"Latsi Eleni\",\n    \"password\": \"LatsElen\",\n    \"birthDate\": \"1972-11-03\",\n    \"role\": \"ROLE_EMPLOYEE\"\n}\n// Giorgos Farmer\n*//*{\n    \"username\": \"PetrGeorge\",\n    \"name\": \"Petroulias Giorgos\",\n    \"password\": \"PetrGeorge\",\n    \"birthDate\": \"2000-05-25\",\n    \"role\": \"ROLE_FARMER\"\n}\n*/\n{\n    \"username\": \"blakas\",\n    \"name\" : \"Vlospa\",\n    \"password\": \"blakas\",\n    \"birthDate\" : \"1995-05-25\",\n    \"role\" : \"ROLE_USER\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/auth/signup",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Signin(Login) data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"JWT\",pm.response.json().accessToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/*// Akyros Typas xwris role\n{\n  \"username\": \"john doe\",\n  \"password\": \"secretpasswordsecret\"\n  \n}\n*//*// Mpampas Admin\n{\n  \"username\": \"PetrMan\",\n  \"password\": \"PetrMan\"\n  \n}\n*//*// Mama Employee\n{\n    \"username\": \"LatsElen\",\n    \"password\": \"LatsElen\"\n}\n*//*// Giorgos Farmer\n{\n    \"username\": \"PetrGeorge\",\n    \"password\": \"PetrGeorge\"\n}*/\n{\n    \"username\" : \"systemAdmin\",\n    \"password\" : \"systemAdmin\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/auth/signin",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"auth",
						"signin"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"JWT\",pm.response.json().accessToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "// Akyros Typas xwris role\n{\n  \"username\": \"john doe\",\n  \"password\": \"secretpasswordsecret\"\n  \n}\n// Mpampas Admin\n{\n  \"username\": \"PetrMan\",\n  \"password\": \"PetrMan\"\n  \n}\n// Mama Employee\n{\n    \"username\": \"LatsElen\",\n    \"password\": \"LatsElen\"\n}\n// Giorgos Farmer\n{\n    \"username\": \"PetrGeorge\",\n    \"password\": \"PetrGeorge\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/logout",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"logout"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"JWT\",pm.response.json().accessToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"Vlospa\",\n  \"name\": \"Petroulias Panagiotis\",\n  \"role\": \"ROLE_ADMIN\",\n  \"birthDate\": \"2003-10-27\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/Admin/users/update-user/9",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Admin",
						"users",
						"update-user",
						"9"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Update employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"JWT\",pm.response.json().accessToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "// Akyros Typas xwris role\n{\n  \"username\": \"john doe\",\n  \"password\": \"secretpasswordsecret\"\n  \n}\n// Mpampas Admin\n{\n  \"username\": \"PetrMan\",\n  \"password\": \"PetrMan\"\n  \n}\n// Mama Employee\n{\n    \"username\": \"LatsElen\",\n    \"password\": \"LatsElen\"\n}\n// Giorgos Farmer\n{\n    \"username\": \"PetrGeorge\",\n    \"password\": \"PetrGeorge\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/Admin/employees/update-employee",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Admin",
						"employees",
						"update-employee"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Update farmer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"JWT\",pm.response.json().accessToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "// Akyros Typas xwris role\n{\n  \"username\": \"john doe\",\n  \"password\": \"secretpasswordsecret\"\n  \n}\n// Mpampas Admin\n{\n  \"username\": \"PetrMan\",\n  \"password\": \"PetrMan\"\n  \n}\n// Mama Employee\n{\n    \"username\": \"LatsElen\",\n    \"password\": \"LatsElen\"\n}\n// Giorgos Farmer\n{\n    \"username\": \"PetrGeorge\",\n    \"password\": \"PetrGeorge\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/auth/signin",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"auth",
						"signin"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Show all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/Admin/users",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show all employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/Admin/employees",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Admin",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show all farmers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/Admin/farmers",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Admin",
						"farmers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show user by id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/Admin/users/5",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Admin",
						"users",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show employee by id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/Admin/employees/4",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Admin",
						"employees",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show farmer by id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/Admin/farmers/8",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Admin",
						"farmers",
						"8"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/Admin/users/delete-user/8",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Admin",
						"users",
						"delete-user",
						"8"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete employee by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/Admin/employees/delete-employee/4",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Admin",
						"employees",
						"delete-employee",
						"4"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete farmer by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/Admin/farmers/delete-farmer/3",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Admin",
						"farmers",
						"delete-farmer",
						"3"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Submit Application",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"JWT\",pm.response.json().accessToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"agriculturalCooperativeName\": \"toufarmer2\",\n  \"members\": [\n    \"Panos\",\"Giorgos\",\"Manolis\",\"Eleni\"\n  ],\n  \"products\": [\n    \"string\"\n  ],\n  \"cultivation_area\": [\n    \"Bougas\",\"Leka\",\"Serniali\",\"Mpokou\"\n  ],\n  \"farmer\": \"systemFarmer\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/Farmer/submitApplication",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Farmer",
						"submitApplication"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Notifications(farmer)",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/Admin/users",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show all applications",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/Employee/applications",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Employee",
						"applications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show application by id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/Employee/application/2",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Employee",
						"application",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Approve application",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"JWT\",pm.response.json().accessToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"comments\": \"Not enough  cultivation_area\",\n    \"status\": \"DISPROVED\",\n    \"employee\" : \"LatsElen\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/Employee/application/approval/2",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"Employee",
						"application",
						"approval",
						"2"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{JWT}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		},
		{
			"key": "hostname",
			"value": "localhost:3030"
		}
	]
}